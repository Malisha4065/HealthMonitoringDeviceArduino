
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8b  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076d  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f3  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ae  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  8e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdcmd>:
		// Handle invalid row (assuming a 2-row display)
		return;
	}
	
	// Send the Set DDRAM Address command
	lcdcmd(address);
  96:	2c 98       	cbi	0x05, 4	; 5
  98:	98 2f       	mov	r25, r24
  9a:	90 7f       	andi	r25, 0xF0	; 240
  9c:	9b b9       	out	0x0b, r25	; 11
  9e:	2b 9a       	sbi	0x05, 3	; 5
  a0:	ef e9       	ldi	r30, 0x9F	; 159
  a2:	ff e0       	ldi	r31, 0x0F	; 15
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdcmd+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcdcmd+0x14>
  aa:	00 00       	nop
  ac:	2b 98       	cbi	0x05, 3	; 5
  ae:	82 95       	swap	r24
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	2b 9a       	sbi	0x05, 3	; 5
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcdcmd+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcdcmd+0x2a>
  c0:	00 00       	nop
  c2:	2b 98       	cbi	0x05, 3	; 5
  c4:	08 95       	ret

000000c6 <lcddata>:
  c6:	2c 9a       	sbi	0x05, 4	; 5
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	9b b9       	out	0x0b, r25	; 11
  ce:	2b 9a       	sbi	0x05, 3	; 5
  d0:	ef e9       	ldi	r30, 0x9F	; 159
  d2:	ff e0       	ldi	r31, 0x0F	; 15
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcddata+0xe>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcddata+0x14>
  da:	00 00       	nop
  dc:	2b 98       	cbi	0x05, 3	; 5
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	2b 9a       	sbi	0x05, 3	; 5
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcddata+0x24>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcddata+0x2a>
  f0:	00 00       	nop
  f2:	2b 98       	cbi	0x05, 3	; 5
  f4:	08 95       	ret

000000f6 <lcd_init>:
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	84 b9       	out	0x04, r24	; 4
  fc:	2b 98       	cbi	0x05, 3	; 5
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
 104:	82 e3       	ldi	r24, 0x32	; 50
 106:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9f e1       	ldi	r25, 0x1F	; 31
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x30>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <lcd_print>:
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	59 f0       	breq	.+22     	; 0x14e <lcd_print+0x24>
 138:	8f 01       	movw	r16, r30
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	0e 94 63 00 	call	0xc6	; 0xc6 <lcddata>
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	f1 1d       	adc	r31, r1
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <lcd_print+0x12>
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <lcd_clear>:
}

void lcd_clear() {
	lcdcmd(0x01);  // Send clear display command
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9f e1       	ldi	r25, 0x1F	; 31
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_clear+0xa>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_clear+0x10>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <main>:
	_delay_ms(2);  // Wait for the LCD to process the command
}

int main(void)
{
	lcd_init();
 16a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_init>
		// Handle invalid row (assuming a 2-row display)
		return;
	}
	
	// Send the Set DDRAM Address command
	lcdcmd(address);
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
int main(void)
{
	lcd_init();
	
	lcd_set_cursor(0, 0);  // Set cursor to first row, first column
	lcd_print("Hello AVR");
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
		// Handle invalid row (assuming a 2-row display)
		return;
	}
	
	// Send the Set DDRAM Address command
	lcdcmd(address);
 17c:	85 ec       	ldi	r24, 0xC5	; 197
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <lcdcmd>
	lcd_init();
	
	lcd_set_cursor(0, 0);  // Set cursor to first row, first column
	lcd_print("Hello AVR");
	lcd_set_cursor(1, 5);  // Set cursor to second row, sixth column
	lcd_print("World!");
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	83 e2       	ldi	r24, 0x23	; 35
 18e:	94 ef       	ldi	r25, 0xF4	; 244
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x26>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x30>
 19a:	00 00       	nop
	_delay_ms(5000);
    /* Replace with your application code */
    while (1) 
    {
		lcd_clear();
 19c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clear>
		lcd_print("yes");
 1a0:	81 e1       	ldi	r24, 0x11	; 17
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	83 ed       	ldi	r24, 0xD3	; 211
 1ac:	90 e3       	ldi	r25, 0x30	; 48
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x44>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x4e>
 1b8:	00 00       	nop
		_delay_ms(1000);
		lcd_clear();
 1ba:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clear>
		lcd_print("no");
 1be:	85 e1       	ldi	r24, 0x15	; 21
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x62>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x6c>
 1d6:	00 00       	nop
 1d8:	e1 cf       	rjmp	.-62     	; 0x19c <main+0x32>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
